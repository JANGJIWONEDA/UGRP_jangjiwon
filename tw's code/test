from transformers import AutoModelForImageClassification, AutoImageProcessor
from peft import PeftModel, PeftConfig
from datasets import load_dataset
import torch
import torch.nn.functional as F

# 모델 경로
model_path = "./trained_model"

# LoRA 어댑터 구성 로드
adapter_config = PeftConfig.from_pretrained(model_path)

# 기본 모델 로드
model = AutoModelForImageClassification.from_pretrained(
    adapter_config.base_model_name_or_path,
    num_labels=8  # CIFAR-10은 10개의 클래스를 가짐
)

# LoRA 어댑터 적용
model = PeftModel.from_pretrained(model, model_path)

# 이미지 프로세서 로드
image_processor = AutoImageProcessor.from_pretrained(model_path)

# 디바이스 설정
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# CIFAR-10 데이터셋 로드 (테스트용)
dataset = load_dataset("cifar10")
test_dataset = dataset['test'].select(range(100))  # 테스트 데이터셋에서 100개의 샘플 선택

# 전처리 함수 정의
def preprocess_test(example_batch):
    # 이미지를 텐서로 변환하고, 모델에 필요한 전처리 적용
    example_batch["pixel_values"] = [image_processor(image.convert("RGB"), return_tensors="pt")["pixel_values"] for image in example_batch["img"]]
    return example_batch

# 테스트 데이터셋 전처리
test_dataset = test_dataset.map(preprocess_test, batched=True, remove_columns=["img"])

# 모델 예측 수행 및 정확도 계산
model.eval()
correct_predictions = 0
total_predictions = 0

with torch.no_grad():
    for example in test_dataset:
        # example["pixel_values"]가 리스트인지 확인하고, 텐서로 변환
        if isinstance(example["pixel_values"], list):
            example["pixel_values"] = [torch.tensor(img) for img in example["pixel_values"]]

        # pixel_values가 4D 텐서가 되도록 보장
        pixel_values = torch.stack(example["pixel_values"])

        # 채널 차원이 3이 아니면, 올바르게 변환
        if pixel_values.dim() == 3:
            pixel_values = pixel_values.unsqueeze(1).repeat(1, 3, 1, 1)

        pixel_values = pixel_values.to(device)
        outputs = model(pixel_values)
        logits = outputs.logits
        predictions = torch.argmax(logits, dim=-1)

        # 실제 라벨과 예측 라벨 비교
        labels = torch.tensor(example['label']).to(device)

        # labels가 스칼라 값일 경우 1차원 텐서로 변환
        if labels.dim() == 0:
            labels = labels.unsqueeze(0)

        correct_predictions += (predictions == labels).sum().item()
        total_predictions += labels.size(0)

# 정확도 계산 및 출력
accuracy = (correct_predictions / total_predictions) * 100
print(f"Correct Predictions: {correct_predictions}/{total_predictions}")
print(f"Accuracy: {accuracy:.2f}%")
